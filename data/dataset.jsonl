{"code": "public class InventoryManager {\n    private Map<String, Integer> inventory;\n\n    public InventoryManager() {\n        inventory = new HashMap<>();\n    }\n\n    public void addItem(String item, int quantity) {\n        inventory.put(item, inventory.getOrDefault(item, 0) + quantity);\n    }\n\n    public int getItemQuantity(String item) {\n        return inventory.get(item);\n    }\n\n    public boolean isItemInStock(String item) {\n        return inventory.containsKey(item);\n    }\n}\n", "feedback": {"Quality_MagicNumbers": [{"line": 10, "feedback": "Avoid magic numbers."}], "OOP_LowCohesion": [{"line": 3, "feedback": "Class contains too many unrelated methods."}], "Performance_InefficientDataStructure": [{"line": 8, "feedback": "Using HashMap for item lookup can be inefficient if the inventory is large."}], "Security_SensitiveLogging": [{"line": 13, "feedback": "Avoid sensitive data in logs."}]}}
{"code": "public class Example {\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        int target = 6;\n        System.out.println(binarySearch(nums, target));\n    }\n\n    public static int binarySearch(int[] nums, int target) {\n        int left = 0;\n        int right = nums.length - 1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] < target) {\n                left = mid + 2;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n}", "feedback": {"Correctness_LogicBug": [{"line": 10, "feedback": "Off-by-one error in the while loop condition."}], "Quality_MagicNumbers": [{"line": 5, "feedback": "Avoid magic number 6 for target value."}, {"line": 13, "feedback": "Magic numbers in array indices."}], "Quality_RedundantOperations": [{"line": 12, "feedback": "Redundant addition of 2 to the left pointer."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains unrelated method for binary search and main method."}], "Performance_MemoryLeakRisk": [{"line": 9, "feedback": "Potential memory leak if nums is large."}], "Testability_NoTestsDetected": [{"line": 2, "feedback": "No tests detected for the class."}], "Security_HardcodedCredentials": [{"line": 3, "feedback": "Hardcoded credentials are not allowed in production code."}], "Quality_CodeDuplication": [{"line": 8, "feedback": "Duplicate logic in binary search implementation."}], "Performance_StringConcatenationInLoop": [{"line": 7, "feedback": "String concatenation inside a loop can be inefficient."}]}}
{"code": "public class PalindromeChecker { \n    public static boolean isPalindrome(String s) {\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello\";\n        System.out.println(\"Is palindrome: \" + isPalindrome(input));\n    }\n}", "feedback": {"Quality_MagicNumbers": [{"line": 10, "feedback": "Avoid magic numbers."}], "Correctness_LowCohesion": [{"line": 1, "feedback": "Class contains too many unrelated methods."}]}}
{"code": "public class BankAccount { \n    private double balance; \n\n    public BankAccount(double initialBalance) { \n        this.balance = initialBalance; \n    } \n\n    public void deposit(double amount) { \n        if (amount > 0) { \n            balance += amount; \n        } \n    } \n\n    public boolean withdraw(double amount) { \n        if (balance >= amount && amount > 0) { \n            balance -= amount; \n            return true; \n        } else { \n            return false; \n        } \n    } \n\n    public double getBalance() { \n        return balance; \n    } \n}", "feedback": {"Correctness_TypeMismatch": [{"line": 6, "feedback": "Type mismatch: 'amount' should be of type 'int'."}], "Quality_MagicNumbers": [{"line": 13, "feedback": "Avoid magic numbers. Use a constant for the minimum withdrawal amount."}, {"line": 18, "feedback": "Avoid magic numbers. Use a constant for the initial balance."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains unrelated methods that should be separated into different classes."}], "Performance_RedundantOperations": [{"line": 7, "feedback": "Redundant check for 'amount > 0' in both deposit and withdraw methods."}], "Security_NonFinalStatic": [{"line": 2, "feedback": "Non-final static variable. Use a final or non-static variable for balance."}], "Testability_NoTestsDetected": [{"line": 1, "feedback": "No tests detected. Unit tests are missing to ensure the class behaves correctly."}]}}
{"code": "public class CustomerService { private List<Customer> customers;\n\n public CustomerService() {\n  this.customers = new ArrayList();\n }\n\n public void addCustomer(Customer customer) {\n  customers.add(customer);\n }\n\n public Customer findCustomerById(int id) {\n  for (Customer c : customers) {\n   if (c.getId() == id) {\n    return c;\n   }\n  }\n  return null;\n }\n\n public void removeCustomer(int id) {\n  customers.removeIf(c -> c.getId() == id);\n }\n\n public List<Customer> getAllCustomers() {\n  return Collections.unmodifiableList(customers);\n }\n}", "feedback": {"Quality_MagicNumbers": [{"line": 8, "feedback": "Avoid magic numbers."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains too many unrelated methods."}], "Performance_InefficientDataStructure": [{"line": 6, "feedback": "Use a Set for faster lookups."}, {"line": 9, "feedback": "Avoid unnecessary copying of collections."}], "Quality_UnnecessaryObjectCreation": [{"line": 14, "feedback": "Create unmodifiableList once in constructor."}], "Security_ResourceManagement": [{"line": 6, "feedback": "Use try-with-resources for List if possible."}]}}
{"code": "public class StringProcessor { \n    public static void main(String[] args) {\n        int num = 5;\n        for (int i = 0; i <= 10; i++) {\n            if (i % 2 == 0) {\n                System.out.println(i);\n            }\n        }\n        String str = \"Hello, World!\";\n        reverseString(str);\n    }\n\n    public static void reverseString(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            sb.insert(0, s.charAt(i));\n        }\n        System.out.println(sb.toString());\n    }\n}", "feedback": {"Quality_MagicNumbers": [{"line": 4, "feedback": "Avoid magic numbers."}], "Correctness_LogicBug": [{"line": 5, "feedback": "Loop condition is incorrect."}, {"line": 13, "feedback": "Potential null dereference when calling reverseString."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains unrelated methods."}], "Performance_StringConcatenationInLoop": [{"line": 13, "feedback": "Using String concatenation in a loop is inefficient."}], "Quality_RedundantOperations": [{"line": 9, "feedback": "Redundant operation: StringBuilder sb = new StringBuilder();"}, {"line": 10, "feedback": "Redundant operation: for (int i = 0; i < s.length(); i++)"}], "Quality_UnusedVariable": [{"line": 2, "feedback": "Unused variable: num"}], "Correctness_IncorrectLoopBounds": [{"line": 5, "feedback": "Incorrect loop bounds."}]}}
{"code": "public class PalindromeChecker { private String input; public PalindromeChecker(String input) { this.input = input; } public boolean check() { for (int i = 0; i < input.length(); i++) { if (input.charAt(i) != input.charAt(input.length() - i - 1)) return false; } return true; } }", "feedback": {"Performance_RedundantOperations": [{"line": 7, "feedback": "Redundant operations: calculating the length twice within the loop."}]}}
{"code": "import java.util.Arrays;\n\npublic class ArrayUtils {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        reverseArray(arr);\n        System.out.println(Arrays.toString(arr));\n    }\n\n    public static void reverseArray(int[] arr) {\n        for (int i = 0; i < arr.length / 2; i++) {\n            int temp = arr[i];\n            arr[i] = arr[arr.length - i - 1];\n            arr[arr.length - i - 1] = temp;\n        }\n    }\n}\n", "feedback": {"Correctness_MagicNumbers": [{"line": 9, "feedback": "Use a constant for the loop condition."}], "Quality_UnusedVariable": [{"line": 4, "feedback": "Unused variable 'arr' in main method."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains too many unrelated methods."}], "Performance_MemoryLeakRisk": [{"line": 9, "feedback": "Modifying the input array directly can lead to memory leaks."}], "Quality_CodeDuplication": [{"line": 7, "feedback": "Code duplication in reverseArray method."}]}}
{"code": "public class PalindromeChecker { public static boolean check(String str) { String reversed = new StringBuilder(str).reverse().toString(); return str.equals(reversed); } }", "feedback": {"Performance_StringConcatenationInLoop": [{"line": 3, "feedback": "Avoid string concatenation in loops."}]}}
{"code": "public class Calculator {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static int subtract(int a, int c) {\n        return a - c;\n    }\n\n    public static void main(String[] args) {\n        int result = Calculator.add(5, 3);\n        System.out.println(result);\n    }\n}", "feedback": {"Correctness_TypeMismatch": [{"line": 14, "feedback": "Variable 'c' is not declared in method 'subtract'."}], "Quality_MagicNumbers": [{"line": 6, "feedback": "Avoid magic numbers."}, {"line": 9, "feedback": "Avoid magic numbers."}], "OOP_LowCohesion": [{"line": 1, "feedback": "Class contains too many unrelated methods."}], "Performance_BoxingUnboxing": [{"line": 6, "feedback": "Boxing and unboxing are unnecessary here."}, {"line": 9, "feedback": "Boxing and unboxing are unnecessary here."}]}}
